import kotlin.random.Random

class Rabbit : Animal("–ö—Ä–æ–ª–∏–∫", 0, "üêá") {
    override fun eat(plants: MutableList<Plant>, cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (plants.isNotEmpty()) {
            plants.removeAt(0)
            hunger = 0
            logAction("—Å—ä–µ–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
        } else {
            hunger++
            logAction("–Ω–µ –Ω–∞—à–µ–ª —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ —É–≤–µ–ª–∏—á–∏–ª –≥–æ–ª–æ–¥.")
        }
    }

    override fun reproduce(cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (Random.nextInt(100) < SimulationParameters.herbivoreReproductionChance) { // –®–∞–Ω—Å –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
            cells[y][x].animals.add(Rabbit())
            logAction("—Ä–∞–∑–º–Ω–æ–∂–∏–ª—Å—è.")
        }
    }

    override fun move(cells: Array<Array<Cell>>, x: Int, y: Int) {
        val newX = (x + Random.nextInt(-1, 2)).coerceIn(0, cells[0].size - 1)
        val newY = (y + Random.nextInt(-1, 2)).coerceIn(0, cells.size - 1)

        if (newX != x || newY != y) {
            cells[newY][newX].animals.add(this)
            cells[y][x].animals.remove(this)
            logAction("–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ ($newX; $newY).")
        } else {
            logAction("–æ—Å—Ç–∞–ª—Å—è –Ω–∞ –º–µ—Å—Ç–µ.")
        }
    }
}
class Sheep : Animal("–û–≤—Ü–∞", 0, "üêë") {
    override fun eat(plants: MutableList<Plant>, cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (plants.isNotEmpty()) {
            plants.removeAt(0)
            hunger = 0
            logAction("—Å—ä–µ–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
        } else {
            hunger++
        }
    }

    override fun reproduce(cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (Random.nextInt(100) < 15) { // 15% —à–∞–Ω—Å –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
            cells[y][x].animals.add(Sheep())
            logAction("—Ä–∞–∑–º–Ω–æ–∂–∏–ª—Å—è.")
        }
    }

    override fun move(cells: Array<Array<Cell>>, x: Int, y: Int) {
        val newX = (x + Random.nextInt(-1, 2)).coerceIn(0, cells[0].size - 1)
        val newY = (y + Random.nextInt(-1, 2)).coerceIn(0, cells.size - 1)

        if (newX != x || newY != y) {
            cells[newY][newX].animals.add(this)
            cells[y][x].animals.remove(this)
            logAction("–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ ($newX; $newY).")
        }
    }
}

class Boar : Animal("–ö–∞–±–∞–Ω", 0, "üêó") {
    override fun eat(plants: MutableList<Plant>, cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (plants.isNotEmpty()) {
            plants.removeAt(0)
            hunger = 0
            logAction("—Å—ä–µ–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
        } else {
            hunger++
        }
    }

    override fun reproduce(cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (Random.nextInt(100) < 10) { // 10% —à–∞–Ω—Å –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
            cells[y][x].animals.add(Boar())
            logAction("—Ä–∞–∑–º–Ω–æ–∂–∏–ª—Å—è.")
        }
    }

    override fun move(cells: Array<Array<Cell>>, x: Int, y: Int) {
        val newX = (x + Random.nextInt(-1, 2)).coerceIn(0, cells[0].size - 1)
        val newY = (y + Random.nextInt(-1, 2)).coerceIn(0, cells.size - 1)

        if (newX != x || newY != y) {
            cells[newY][newX].animals.add(this)
            cells[y][x].animals.remove(this)
            logAction("–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ ($newX; $newY).")
        }
    }
}
class Buffalo : Animal("–ë—É–π–≤–æ–ª", 0, "üêÉ") {
    override fun eat(plants: MutableList<Plant>, cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (plants.isNotEmpty()) {
            plants.removeAt(0)
            hunger = 0
            logAction("—Å—ä–µ–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
        } else {
            hunger++
        }
    }

    override fun reproduce(cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (Random.nextInt(100) < 5) { // 5% —à–∞–Ω—Å –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
            cells[y][x].animals.add(Buffalo())
            logAction("—Ä–∞–∑–º–Ω–æ–∂–∏–ª—Å—è.")
        }
    }

    override fun move(cells: Array<Array<Cell>>, x: Int, y: Int) {
        val newX = (x + Random.nextInt(-1, 2)).coerceIn(0, cells[0].size - 1)
        val newY = (y + Random.nextInt(-1, 2)).coerceIn(0, cells.size - 1)

        if (newX != x || newY != y) {
            cells[newY][newX].animals.add(this)
            cells[y][x].animals.remove(this)
            logAction("–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ ($newX; $newY).")
        }
    }
}

class Duck : Animal("–£—Ç–∫–∞", 0, "ü¶Ü") {
    override fun eat(plants: MutableList<Plant>, cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (plants.isNotEmpty()) {
            plants.removeAt(0)
            hunger = 0
            logAction("—Å—ä–µ–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
        } else {
            hunger++
        }
    }

    override fun reproduce(cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (Random.nextInt(100) < 20) { // 20% —à–∞–Ω—Å –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
            cells[y][x].animals.add(Duck())
            logAction("—Ä–∞–∑–º–Ω–æ–∂–∏–ª—Å—è.")
        }
    }

    override fun move(cells: Array<Array<Cell>>, x: Int, y: Int) {
        val newX = (x + Random.nextInt(-1, 2)).coerceIn(0, cells[0].size - 1)
        val newY = (y + Random.nextInt(-1, 2)).coerceIn(0, cells.size - 1)

        if (newX != x || newY != y) {
            cells[newY][newX].animals.add(this)
            cells[y][x].animals.remove(this)
            logAction("–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ ($newX; $newY).")
        }
    }
}
class Horse : Animal("–õ–æ—à–∞–¥—å", 0, "üêé") {
    override fun eat(plants: MutableList<Plant>, cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (plants.isNotEmpty()) {
            plants.removeAt(0)
            hunger = 0
            logAction("—Å—ä–µ–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
        } else {
            hunger++
        }
    }

    override fun reproduce(cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (Random.nextInt(100) < 15) { // 15% —à–∞–Ω—Å –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
            cells[y][x].animals.add(Horse())
            logAction("—Ä–∞–∑–º–Ω–æ–∂–∏–ª—Å—è.")
        }
    }

    override fun move(cells: Array<Array<Cell>>, x: Int, y: Int) {
        val newX = (x + Random.nextInt(-1, 2)).coerceIn(0, cells[0].size - 1)
        val newY = (y + Random.nextInt(-1, 2)).coerceIn(0, cells.size - 1)

        if (newX != x || newY != y) {
            cells[newY][newX].animals.add(this)
            cells[y][x].animals.remove(this)
            logAction("–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ ($newX; $newY).")
        }
    }
}
class Deer : Animal("–û–ª–µ–Ω—å", 0, "ü¶å") {
    override fun eat(plants: MutableList<Plant>, cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (plants.isNotEmpty()) {
            plants.removeAt(0)
            hunger = 0
            logAction("—Å—ä–µ–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
        } else {
            hunger++
        }
    }

    override fun reproduce(cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (Random.nextInt(100) < 10) { // 10% —à–∞–Ω—Å –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
            cells[y][x].animals.add(Deer())
            logAction("—Ä–∞–∑–º–Ω–æ–∂–∏–ª—Å—è.")
        }
    }

    override fun move(cells: Array<Array<Cell>>, x: Int, y: Int) {
        val newX = (x + Random.nextInt(-1, 2)).coerceIn(0, cells[0].size - 1)
        val newY = (y + Random.nextInt(-1, 2)).coerceIn(0, cells.size - 1)

        if (newX != x || newY != y) {
            cells[newY][newX].animals.add(this)
            cells[y][x].animals.remove(this)
            logAction("–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ ($newX; $newY).")
        }
    }
}
class Mouse : Animal("–ú—ã—à—å", 0, "üêÅ") {
    override fun eat(plants: MutableList<Plant>, cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (plants.isNotEmpty()) {
            plants.removeAt(0)
            hunger = 0
            logAction("—Å—ä–µ–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
        } else {
            hunger++
        }
    }

    override fun reproduce(cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (Random.nextInt(100) < 25) { // 25% —à–∞–Ω—Å –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
            cells[y][x].animals.add(Mouse())
            logAction("—Ä–∞–∑–º–Ω–æ–∂–∏–ª—Å—è.")
        }
    }

    override fun move(cells: Array<Array<Cell>>, x: Int, y: Int) {
        val newX = (x + Random.nextInt(-1, 2)).coerceIn(0, cells[0].size - 1)
        val newY = (y + Random.nextInt(-1, 2)).coerceIn(0, cells.size - 1)

        if (newX != x || newY != y) {
            cells[newY][newX].animals.add(this)
            cells[y][x].animals.remove(this)
            logAction("–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ ($newX; $newY).")
        }
    }
}
class Goat : Animal("–ö–æ–∑–∞", 0, "üêê") {
    override fun eat(plants: MutableList<Plant>, cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (plants.isNotEmpty()) {
            plants.removeAt(0)
            hunger = 0
            logAction("—Å—ä–µ–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
        } else {
            hunger++
        }
    }

    override fun reproduce(cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (Random.nextInt(100) < 15) { // 15% —à–∞–Ω—Å –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
            cells[y][x].animals.add(Goat())
            logAction("—Ä–∞–∑–º–Ω–æ–∂–∏–ª—Å—è.")
        }
    }

    override fun move(cells: Array<Array<Cell>>, x: Int, y: Int) {
        val newX = (x + Random.nextInt(-1, 2)).coerceIn(0, cells[0].size - 1)
        val newY = (y + Random.nextInt(-1, 2)).coerceIn(0, cells.size - 1)

        if (newX != x || newY != y) {
            cells[newY][newX].animals.add(this)
            cells[y][x].animals.remove(this)
            logAction("–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ ($newX; $newY).")
        }
    }
}
class Caterpillar : Animal("–ì—É—Å–µ–Ω–∏—Ü–∞", 0, "üêõ") {
    override fun eat(plants: MutableList<Plant>, cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (plants.isNotEmpty()) {
            plants.removeAt(0) // –ì—É—Å–µ–Ω–∏—Ü–∞ –µ—Å—Ç —Ä–∞—Å—Ç–µ–Ω–∏–µ
            hunger = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ–¥
            logAction("—Å—ä–µ–ª —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
        } else {
            hunger++ // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–æ–ª–æ–¥, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π
        }
    }

    override fun reproduce(cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (Random.nextInt(100) < 30) { // 30% —à–∞–Ω—Å –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
            cells[y][x].animals.add(Caterpillar())
            logAction("—Ä–∞–∑–º–Ω–æ–∂–∏–ª–∞—Å—å.")
        }
    }

    override fun move(cells: Array<Array<Cell>>, x: Int, y: Int) {
        val newX = (x + Random.nextInt(-1, 2)).coerceIn(0, cells[0].size - 1)
        val newY = (y + Random.nextInt(-1, 2)).coerceIn(0, cells.size - 1)

        if (newX != x || newY != y) {
            cells[newY][newX].animals.add(this)
            cells[y][x].animals.remove(this)
            logAction("–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∞—Å—å –Ω–∞ ($newX; $newY).")
        }
    }
}