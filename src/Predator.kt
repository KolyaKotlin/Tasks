import kotlin.random.Random

class Wolf : Animal("–í–æ–ª–∫", 0, "üê∫") {
    override fun eat(plants: MutableList<Plant>, cells: Array<Array<Cell>>, x: Int, y: Int) {
        val prey = cells[y][x].animals.filterIsInstance<Rabbit>().firstOrNull()
        if (prey != null) {
            cells[y][x].animals.remove(prey)
            hunger = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ–¥
            logAction("—Å—ä–µ–ª $prey.")
        } else {
            hunger++
        }
    }

    override fun reproduce(cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (Random.nextInt(100) < SimulationParameters.predatorReproductionChance) { // –®–∞–Ω—Å –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
            cells[y][x].animals.add(Wolf())
            logAction("—Ä–∞–∑–º–Ω–æ–∂–∏–ª—Å—è.")
        }
    }

    override fun move(cells: Array<Array<Cell>>, x: Int, y: Int) {
        val newX = (x + Random.nextInt(-1, 2)).coerceIn(0, cells[0].size - 1)
        val newY = (y + Random.nextInt(-1, 2)).coerceIn(0, cells.size - 1)

        if (newX != x || newY != y) {
            cells[newY][newX].animals.add(this)
            cells[y][x].animals.remove(this)
            logAction("–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ ($newX; $newY).")
        }
    }
}

class Snake : Animal("–ó–º–µ—è", 0, "üêç") {
    override fun eat(plants: MutableList<Plant>, cells: Array<Array<Cell>>, x: Int, y: Int) {
        val prey = cells[y][x].animals.filterIsInstance<Mouse>().firstOrNull()
        if (prey != null) {
            cells[y][x].animals.remove(prey)
            hunger = 0
            logAction("—Å—ä–µ–ª $prey.")
        } else {
            hunger++
        }
    }

    override fun reproduce(cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (Random.nextInt(100) < SimulationParameters.predatorReproductionChance) { // –®–∞–Ω—Å –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
            cells[y][x].animals.add(Snake())
            logAction("—Ä–∞–∑–º–Ω–æ–∂–∏–ª–∞—Å—å.")
        }
    }

    override fun move(cells: Array<Array<Cell>>, x: Int, y: Int) {
        val newX = (x + Random.nextInt(-1, 2)).coerceIn(0, cells[0].size - 1)
        val newY = (y + Random.nextInt(-1, 2)).coerceIn(0, cells.size - 1)

        if (newX != x || newY != y) {
            cells[newY][newX].animals.add(this)
            cells[y][x].animals.remove(this)
            logAction("–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∞—Å—å –Ω–∞ ($newX; $newY).")
        }
    }
}

class Fox : Animal("–õ–∏—Å–∞", 0, "ü¶ä") {
    override fun eat(plants: MutableList<Plant>, cells: Array<Array<Cell>>, x: Int, y: Int) {
        val prey = cells[y][x].animals.filterIsInstance<Rabbit>().firstOrNull()
        if (prey != null) {
            cells[y][x].animals.remove(prey)
            hunger = 0
            logAction("—Å—ä–µ–ª $prey.")
        } else {
            hunger++
        }
    }

    override fun reproduce(cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (Random.nextInt(100) < SimulationParameters.predatorReproductionChance) { // –®–∞–Ω—Å –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
            cells[y][x].animals.add(Fox())
            logAction("—Ä–∞–∑–º–Ω–æ–∂–∏–ª–∞—Å—å.")
        }
    }

    override fun move(cells: Array<Array<Cell>>, x: Int, y: Int) {
        val newX = (x + Random.nextInt(-1, 2)).coerceIn(0, cells[0].size - 1)
        val newY = (y + Random.nextInt(-1, 2)).coerceIn(0, cells.size - 1)

        if (newX != x || newY != y) {
            cells[newY][newX].animals.add(this)
            cells[y][x].animals.remove(this)
            logAction("–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∞—Å—å –Ω–∞ ($newX; $newY).")
        }
    }
}
class Bear : Animal("–ú–µ–¥–≤–µ–¥—å", 0, "üêª") {
    override fun eat(plants: MutableList<Plant>, cells: Array<Array<Cell>>, x: Int, y: Int) {
        val prey = cells[y][x].animals.filterIsInstance<Deer>().firstOrNull()
        if (prey != null) {
            cells[y][x].animals.remove(prey)
            hunger = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ–¥
            logAction("—Å—ä–µ–ª $prey.")
        } else {
            hunger++
        }
    }

    override fun reproduce(cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (Random.nextInt(100) < SimulationParameters.predatorReproductionChance) { // –®–∞–Ω—Å –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
            cells[y][x].animals.add(Bear())
            logAction("—Ä–∞–∑–º–Ω–æ–∂–∏–ª—Å—è.")
        }
    }

    override fun move(cells: Array<Array<Cell>>, x: Int, y: Int) {
        val newX = (x + Random.nextInt(-1, 2)).coerceIn(0, cells[0].size - 1)
        val newY = (y + Random.nextInt(-1, 2)).coerceIn(0, cells.size - 1)

        if (newX != x || newY != y) {
            cells[newY][newX].animals.add(this)
            cells[y][x].animals.remove(this)
            logAction("–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ ($newX; $newY).")
        }
    }
}
class Eagle : Animal("–û—Ä—ë–ª", 0, "ü¶Ö") {
    override fun eat(plants: MutableList<Plant>, cells: Array<Array<Cell>>, x: Int, y: Int) {
        val prey = cells[y][x].animals.filterIsInstance<Mouse>().firstOrNull()
        if (prey != null) {
            cells[y][x].animals.remove(prey)
            hunger = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ–¥
            logAction("—Å—ä–µ–ª $prey.")
        } else {
            hunger++
        }
    }

    override fun reproduce(cells: Array<Array<Cell>>, x: Int, y: Int) {
        if (Random.nextInt(100) < SimulationParameters.predatorReproductionChance) { // –®–∞–Ω—Å –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
            cells[y][x].animals.add(Eagle())
            logAction("—Ä–∞–∑–º–Ω–æ–∂–∏–ª—Å—è.")
        }
    }

    override fun move(cells: Array<Array<Cell>>, x: Int, y: Int) {
        val newX = (x + Random.nextInt(-1, 2)).coerceIn(0, cells[0].size - 1)
        val newY = (y + Random.nextInt(-1, 2)).coerceIn(0, cells.size - 1)

        if (newX != x || newY != y) {
            cells[newY][newX].animals.add(this)
            cells[y][x].animals.remove(this)
            logAction("–ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ ($newX; $newY).")
        }
    }
}